package com.zed.xposed.demo.greedao.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.zed.xposed.demo.greedao.entity.WxContact;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "WX_CONTACT".
*/
public class WxContactDao extends AbstractDao<WxContact, Void> {

    public static final String TABLENAME = "WX_CONTACT";

    /**
     * Properties of entity WxContact.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Field_username = new Property(0, String.class, "field_username", false, "FIELD_USERNAME");
        public final static Property Field_nickname = new Property(1, String.class, "field_nickname", false, "FIELD_NICKNAME");
        public final static Property Field_alias = new Property(2, String.class, "field_alias", false, "FIELD_ALIAS");
        public final static Property Field_conRemark = new Property(3, String.class, "field_conRemark", false, "FIELD_CON_REMARK");
        public final static Property Field_verifyFlag = new Property(4, int.class, "field_verifyFlag", false, "FIELD_VERIFY_FLAG");
        public final static Property Field_showHead = new Property(5, int.class, "field_showHead", false, "FIELD_SHOW_HEAD");
        public final static Property Field_weiboFlag = new Property(6, int.class, "field_weiboFlag", false, "FIELD_WEIBO_FLAG");
        public final static Property FNU = new Property(7, long.class, "fNU", false, "F_NU");
        public final static Property Field_deleteFlag = new Property(8, int.class, "field_deleteFlag", false, "FIELD_DELETE_FLAG");
        public final static Property Field_lvbuff = new Property(9, byte[].class, "field_lvbuff", false, "FIELD_LVBUFF");
        public final static Property Field_descWordingId = new Property(10, String.class, "field_descWordingId", false, "FIELD_DESC_WORDING_ID");
        public final static Property Field_openImAppid = new Property(11, String.class, "field_openImAppid", false, "FIELD_OPEN_IM_APPID");
        public final static Property Field_descWording = new Property(12, String.class, "field_descWording", false, "FIELD_DESC_WORDING");
        public final static Property Field_descWordingQuanpin = new Property(13, String.class, "field_descWordingQuanpin", false, "FIELD_DESC_WORDING_QUANPIN");
        public final static Property Field_remarkDesc = new Property(14, String.class, "field_remarkDesc", false, "FIELD_REMARK_DESC");
        public final static Property Field_signature = new Property(15, String.class, "field_signature", false, "FIELD_SIGNATURE");
    }


    public WxContactDao(DaoConfig config) {
        super(config);
    }
    
    public WxContactDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"WX_CONTACT\" (" + //
                "\"FIELD_USERNAME\" TEXT," + // 0: field_username
                "\"FIELD_NICKNAME\" TEXT," + // 1: field_nickname
                "\"FIELD_ALIAS\" TEXT," + // 2: field_alias
                "\"FIELD_CON_REMARK\" TEXT," + // 3: field_conRemark
                "\"FIELD_VERIFY_FLAG\" INTEGER NOT NULL ," + // 4: field_verifyFlag
                "\"FIELD_SHOW_HEAD\" INTEGER NOT NULL ," + // 5: field_showHead
                "\"FIELD_WEIBO_FLAG\" INTEGER NOT NULL ," + // 6: field_weiboFlag
                "\"F_NU\" INTEGER NOT NULL ," + // 7: fNU
                "\"FIELD_DELETE_FLAG\" INTEGER NOT NULL ," + // 8: field_deleteFlag
                "\"FIELD_LVBUFF\" BLOB," + // 9: field_lvbuff
                "\"FIELD_DESC_WORDING_ID\" TEXT," + // 10: field_descWordingId
                "\"FIELD_OPEN_IM_APPID\" TEXT," + // 11: field_openImAppid
                "\"FIELD_DESC_WORDING\" TEXT," + // 12: field_descWording
                "\"FIELD_DESC_WORDING_QUANPIN\" TEXT," + // 13: field_descWordingQuanpin
                "\"FIELD_REMARK_DESC\" TEXT," + // 14: field_remarkDesc
                "\"FIELD_SIGNATURE\" TEXT);"); // 15: field_signature
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"WX_CONTACT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, WxContact entity) {
        stmt.clearBindings();
 
        String field_username = entity.getField_username();
        if (field_username != null) {
            stmt.bindString(1, field_username);
        }
 
        String field_nickname = entity.getField_nickname();
        if (field_nickname != null) {
            stmt.bindString(2, field_nickname);
        }
 
        String field_alias = entity.getField_alias();
        if (field_alias != null) {
            stmt.bindString(3, field_alias);
        }
 
        String field_conRemark = entity.getField_conRemark();
        if (field_conRemark != null) {
            stmt.bindString(4, field_conRemark);
        }
        stmt.bindLong(5, entity.getField_verifyFlag());
        stmt.bindLong(6, entity.getField_showHead());
        stmt.bindLong(7, entity.getField_weiboFlag());
        stmt.bindLong(8, entity.getFNU());
        stmt.bindLong(9, entity.getField_deleteFlag());
 
        byte[] field_lvbuff = entity.getField_lvbuff();
        if (field_lvbuff != null) {
            stmt.bindBlob(10, field_lvbuff);
        }
 
        String field_descWordingId = entity.getField_descWordingId();
        if (field_descWordingId != null) {
            stmt.bindString(11, field_descWordingId);
        }
 
        String field_openImAppid = entity.getField_openImAppid();
        if (field_openImAppid != null) {
            stmt.bindString(12, field_openImAppid);
        }
 
        String field_descWording = entity.getField_descWording();
        if (field_descWording != null) {
            stmt.bindString(13, field_descWording);
        }
 
        String field_descWordingQuanpin = entity.getField_descWordingQuanpin();
        if (field_descWordingQuanpin != null) {
            stmt.bindString(14, field_descWordingQuanpin);
        }
 
        String field_remarkDesc = entity.getField_remarkDesc();
        if (field_remarkDesc != null) {
            stmt.bindString(15, field_remarkDesc);
        }
 
        String field_signature = entity.getField_signature();
        if (field_signature != null) {
            stmt.bindString(16, field_signature);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, WxContact entity) {
        stmt.clearBindings();
 
        String field_username = entity.getField_username();
        if (field_username != null) {
            stmt.bindString(1, field_username);
        }
 
        String field_nickname = entity.getField_nickname();
        if (field_nickname != null) {
            stmt.bindString(2, field_nickname);
        }
 
        String field_alias = entity.getField_alias();
        if (field_alias != null) {
            stmt.bindString(3, field_alias);
        }
 
        String field_conRemark = entity.getField_conRemark();
        if (field_conRemark != null) {
            stmt.bindString(4, field_conRemark);
        }
        stmt.bindLong(5, entity.getField_verifyFlag());
        stmt.bindLong(6, entity.getField_showHead());
        stmt.bindLong(7, entity.getField_weiboFlag());
        stmt.bindLong(8, entity.getFNU());
        stmt.bindLong(9, entity.getField_deleteFlag());
 
        byte[] field_lvbuff = entity.getField_lvbuff();
        if (field_lvbuff != null) {
            stmt.bindBlob(10, field_lvbuff);
        }
 
        String field_descWordingId = entity.getField_descWordingId();
        if (field_descWordingId != null) {
            stmt.bindString(11, field_descWordingId);
        }
 
        String field_openImAppid = entity.getField_openImAppid();
        if (field_openImAppid != null) {
            stmt.bindString(12, field_openImAppid);
        }
 
        String field_descWording = entity.getField_descWording();
        if (field_descWording != null) {
            stmt.bindString(13, field_descWording);
        }
 
        String field_descWordingQuanpin = entity.getField_descWordingQuanpin();
        if (field_descWordingQuanpin != null) {
            stmt.bindString(14, field_descWordingQuanpin);
        }
 
        String field_remarkDesc = entity.getField_remarkDesc();
        if (field_remarkDesc != null) {
            stmt.bindString(15, field_remarkDesc);
        }
 
        String field_signature = entity.getField_signature();
        if (field_signature != null) {
            stmt.bindString(16, field_signature);
        }
    }

    @Override
    public Void readKey(Cursor cursor, int offset) {
        return null;
    }    

    @Override
    public WxContact readEntity(Cursor cursor, int offset) {
        WxContact entity = new WxContact( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // field_username
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // field_nickname
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // field_alias
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // field_conRemark
            cursor.getInt(offset + 4), // field_verifyFlag
            cursor.getInt(offset + 5), // field_showHead
            cursor.getInt(offset + 6), // field_weiboFlag
            cursor.getLong(offset + 7), // fNU
            cursor.getInt(offset + 8), // field_deleteFlag
            cursor.isNull(offset + 9) ? null : cursor.getBlob(offset + 9), // field_lvbuff
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // field_descWordingId
            cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11), // field_openImAppid
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12), // field_descWording
            cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13), // field_descWordingQuanpin
            cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14), // field_remarkDesc
            cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15) // field_signature
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, WxContact entity, int offset) {
        entity.setField_username(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setField_nickname(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setField_alias(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setField_conRemark(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setField_verifyFlag(cursor.getInt(offset + 4));
        entity.setField_showHead(cursor.getInt(offset + 5));
        entity.setField_weiboFlag(cursor.getInt(offset + 6));
        entity.setFNU(cursor.getLong(offset + 7));
        entity.setField_deleteFlag(cursor.getInt(offset + 8));
        entity.setField_lvbuff(cursor.isNull(offset + 9) ? null : cursor.getBlob(offset + 9));
        entity.setField_descWordingId(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setField_openImAppid(cursor.isNull(offset + 11) ? null : cursor.getString(offset + 11));
        entity.setField_descWording(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
        entity.setField_descWordingQuanpin(cursor.isNull(offset + 13) ? null : cursor.getString(offset + 13));
        entity.setField_remarkDesc(cursor.isNull(offset + 14) ? null : cursor.getString(offset + 14));
        entity.setField_signature(cursor.isNull(offset + 15) ? null : cursor.getString(offset + 15));
     }
    
    @Override
    protected final Void updateKeyAfterInsert(WxContact entity, long rowId) {
        // Unsupported or missing PK type
        return null;
    }
    
    @Override
    public Void getKey(WxContact entity) {
        return null;
    }

    @Override
    public boolean hasKey(WxContact entity) {
        // TODO
        return false;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
